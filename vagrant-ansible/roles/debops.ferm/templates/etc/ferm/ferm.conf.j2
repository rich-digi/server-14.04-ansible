# This file is managed by Ansible, all changes will be lost

# iptables firewall managed by ferm

# You can put custom ferm configuration files in directories:
#
# - /etc/ferm/filter-input.d/
#       for table filter, chain INPUT; it will be automatically included in the
#       chain, so you don't need to add these ferm subsections
#
# - /etc/ferm/ferm.d/
#       for all other tables and chains; you need to add full ferm
#       configuration here, this directory is included at the end of the file.
#       ferm will correctly merge your own configuration with the rest.


# Global firewall variables
@def $domains		= ({{ ferm_filter_domains | unique | join(" ") }});
@def $ipv4_enabled	= {% if 'ip'  in ferm_filter_domains %}1{% else %}0{% endif %};
@def $ipv6_enabled	= {% if 'ip6' in ferm_filter_domains %}1{% else %}0{% endif %};


domain $domains table filter {

	# Default chain policy
	chain INPUT    policy {{ ferm_default_policy_input   | default('DROP') }};
	chain OUTPUT   policy {{ ferm_default_policy_output  | default('ACCEPT') }};
	chain FORWARD  policy {{ ferm_default_policy_forward | default('DROP') }};

	chain INPUT {

		# Allow loopback connections
		interface lo ACCEPT;

{% if ferm_icmp_limit is defined and ferm_icmp_limit %}
		# Limit incoming ICMP traffic per source
		protocol icmp @subchain "ICMP-flood" {
			mod hashlimit	hashlimit {{ ferm_icmp_limit }}
					hashlimit-burst {{ ferm_icmp_burst }}
					hashlimit-mode srcip
					hashlimit-name ICMP-flood
					hashlimit-htable-expire 3600000
			ACCEPT;
			mod limit limit 3/hour limit-burst 2 {
				LOG log-prefix "iptables-ICMP-flood: ";
			}
			REJECT reject-with icmp-admin-prohibited;
		}
{% else %}
		# Accept incoming ICMP traffic
		protocol icmp ACCEPT;
{% endif %}
	}

	chain (INPUT OUTPUT FORWARD) {

		# Connection tracking
		mod conntrack ctstate INVALID DROP;
		mod conntrack ctstate (ESTABLISHED RELATED) ACCEPT;
	}

	chain INPUT {

{% if ferm_syn_limit is defined and ferm_syn_limit %}
		# SYN-flood protection per source
		protocol tcp syn @subchain "SYN-flood" {
			mod hashlimit	hashlimit {{ ferm_syn_limit }}
					hashlimit-burst {{ ferm_syn_burst }}
					hashlimit-mode srcip
					hashlimit-name SYN-flood
					hashlimit-htable-expire 3600000
			RETURN;
			mod limit limit 3/hour limit-burst 5 {
				LOG log-prefix "iptables-SYN-flood: ";
			}
			REJECT reject-with icmp-admin-prohibited;
		}

{% endif %}
		# Drop connections from bad guys
		mod recent name "{{ ferm_block_recent }}" update seconds {{ ferm_block_time }} {
			mod limit limit 3/hour limit-burst 5 {
				LOG log-prefix "iptables-recent-{{ ferm_block_recent }}: " log-level warning;
			}
			REJECT reject-with icmp-admin-prohibited;
		}

		# Include INPUT rules for enabled domains (IPv4, IPv6)
		@include 'filter-input.d/';

{% if ferm_mark_portscan is defined and ferm_mark_portscan %}
		# Catch bad guys (port scanners)
		mod recent set name "{{ ferm_block_recent }}" {
			mod limit limit 3/hour limit-burst 5 {
				LOG log-prefix "iptables-portscan: " log-level warning;
			}
		}

{% endif %}
		# Reject everything else
		protocol udp REJECT reject-with icmp-port-unreachable;
		protocol tcp REJECT reject-with tcp-reset;
		@if @eq($DOMAIN, ip) {
			REJECT reject-with icmp-proto-unreachable;
		}
	}
}

# Include other configuration files
@include 'ferm.d/';

