# This file is managed remotely, all changes will be lost

# ---- Ansible control variables ----

PKI_LIBRARY		= {{ item.library             | default(pki_library            | default('openssl')) }}

PKI_PRIVATE_KEY		= {{ item.private_key         | default(item.filename | default(item.cn | default(ansible_fqdn))) + '.key' }}
PKI_CERTIFICATE		= {{ item.certificate         | default(item.filename | default(item.cn | default(ansible_fqdn))) + '.crt' }}
PKI_REQUEST		= {{ item.request             | default(item.filename | default(item.cn | default(ansible_fqdn))) + '.csr' }}
PKI_REVOKED		= {{ item.revoked             | default(item.filename | default(item.cn | default(ansible_fqdn))) + '.crl' }}

{% if item.parent is defined and item.parent %}
PKI_PARENT_CA		= {{ item.parent }}

{% endif %}
PKI_PRIVATE_KEY_SIZE	= {{ item.private_key_size    | default(pki_private_key_size   | default('2048')) }}
PKI_DIGEST		= {{ item.digest              | default(pki_digest             | default('sha256')) }}

{% if (item.grants is defined and item.grants in [ 'ca', 'client', 'server', 'cert' ]) %}
{% if (item.parent is undefined or (item.parent is defined and not item.parent)) %}
PKI_SIGN_DAYS		= {{ ((item.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_rootca_multiplier | int) }}
{% elif (item.parent is defined and item.parent) %}
PKI_SIGN_DAYS		= {{ ((item.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_ca_multiplier | int) }}
{% endif %}
{% else %}
PKI_SIGN_DAYS		= {{ ((item.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_cert_multiplier | int) }}
{% endif %}

PKI_PUBLIC_DIR_MODE	= {{ pki_public_dir_mode    | default('0755') }}
PKI_PRIVATE_DIR_MODE	= {{ pki_private_dir_mode   | default('2750') }}
PKI_PUBLIC_MODE		= {{ pki_public_mode        | default('0644') }}
PKI_PRIVATE_MODE	= {{ pki_private_mode       | default('0640') }}

{% if (item.lock is undefined or (item.lock is defined and item.lock)) %}
PKI_LOCK		= this-authority-is-locked
{% else %}
PKI_LOCK		=
{% endif %}

# ---- Makefile control variables ----

DB			= .db

openssl_LIBRARY		= OPENSSL
gnutls_LIBRARY		= GNUTLS
LIBRARY			= $($(PKI_LIBRARY)_LIBRARY)
OPENSSL			= openssl
GNUTLS			= certtool

OPENSSL_COMMAND		= $(OPENSSL)
GNUTLS_COMMAND		= $(GNUTLS)
COMMAND			= $($(LIBRARY)_COMMAND)

OPENSSL_CONFIG		= $(DB)/openssl.cnf
GNUTLS_CONFIG		= $(DB)/gnutls.cnf

CONFIG			= $($(LIBRARY)_CONFIG)

DIGEST			= sha256sum

PRIVATE_KEY		= $(DB)/private/$(PKI_PRIVATE_KEY)
{% if ((item.grants is defined and item.grants in [ 'ca', 'client', 'server', 'cert' ]) and
       (item.parent is undefined or (item.parent is defined and not item.parent))) %}
ROOT_CERTIFICATE	= $(DB)/$(PKI_CERTIFICATE)
{% else %}
CERTIFICATE		= $(shell find $(DB)/ -maxdepth 1 -name $(PKI_CERTIFICATE))
CERTIFICATE_CHAIN	= $(CERTIFICATE)
{% endif %}
CERTIFICATE_ALIAS	= CA.crt

SERIAL			= $(DB)/serial

REVOKED			= revoked/$(PKI_REVOKED)
REVOKED_SERIAL		= $(DB)/serial_crl
REVOKED_ALIAS		= default.crl

{% if item.parent is defined and item.parent %}
PARENT_CA		= ../../$(PKI_PARENT_CA)
PARENT_SYMLINK		= $(DB)/ParentCA

CERTIFICATE_REQUEST	= $(PARENT_SYMLINK)/requests/$(PKI_REQUEST)
SIGNED_CERTIFICATE	= $(PARENT_SYMLINK)/certs/$(PKI_CERTIFICATE)

{% endif %}
CSR			= requests/%.csr
SIGNED_CRT		= $(DB)/certs/%.crt
CRT			= certs/%.crt
KEY			= private/%.key

CRL			= revoked/%.crl

OPENSSL_DIRECTORIES	= $(DB)/signed/
OPENSSL_FILES		= $(DB)/index.txt

PUBLIC_DIRECTORIES	= $(sort $(dir $(CSR)) $(dir $(CRL)) \
			  $(dir $(SIGNED_CRT)) $(dir $(CRT)) \
			  $(dir $($(LIBRARY)_DIRECTORIES)))
PRIVATE_DIRECTORIES	= $(sort $(dir $(PRIVATE_KEY))) $(dir $(KEY))


# ---- Files to process ----

CERTIFICATE_SIGNING_REQUESTS	= $(sort $(patsubst $(CSR),$(SIGNED_CRT),$(wildcard $(subst %,*,$(CSR)))))
CHAINED_CERTIFICATES		= $(sort $(patsubst $(SIGNED_CRT),$(CRT),$(wildcard $(subst %,*,$(SIGNED_CRT)))))


# ---- Aliased commands ----

MKDIR_PUBLIC					= @mkdir -m $(PKI_PUBLIC_DIR_MODE) -p $(@D)
MKDIR_PRIVATE					= @mkdir -m $(PKI_PRIVATE_DIR_MODE) -p $(@D)


OPENSSL_COMMAND_PRIVATE_KEY			= $(OPENSSL) genrsa -out $@.tmp $(PKI_PRIVATE_KEY_SIZE)
GNUTLS_COMMAND_PRIVATE_KEY			= $(GNUTLS) --generate-privkey --hash $(PKI_DIGEST) --bits $(PKI_PRIVATE_KEY_SIZE) --outfile $@.tmp

OPENSSL_COMMAND_SELF_SIGNED_CERTIFICATE		= $(OPENSSL) req -new -x509 -config $(CONFIG) -key $(PRIVATE_KEY) -out $@.tmp -days $(PKI_SIGN_DAYS)
GNUTLS_COMMAND_SELF_SIGNED_CERTIFICATE		= $(GNUTLS) --generate-self-signed --template $(patsubst $(ROOTCA_CRT),$(CNF),$@) --load-privkey $(patsubst $(ROOTCA_CRT),$(KEY),$@) --load-request $(patsubst $(ROOTCA_CRT),$(CSR),$@) --outfile $@.tmp

OPENSSL_COMMAND_REQUEST_CERTIFICATE		= $(OPENSSL) req -new -utf8 -config $(CONFIG) -key $(PRIVATE_KEY) -out $@.tmp
GNUTLS_COMMAND_REQUEST_CERTIFICATE		= $(GNUTLS) --generate-request --template $(CONFIG) --load-privkey $(PRIVATE_KEY) --outfile $@.tmp

OPENSSL_COMMAND_SIGN_CERTIFICATE_REQUEST	= $(OPENSSL) ca -batch -config $(CONFIG) -notext -in $(patsubst $(SIGNED_CRT),$(CSR),$@) -out $@.tmp

OPENSSL_COMMAND_CERTIFICATE_REVOCATION_LIST	= $(OPENSSL) ca -batch -config $(CONFIG) -notext -gencrl -out $@.tmp

OPENSSL_COMMAND_REGENERATE_REVOCATION_LIST	= $(OPENSSL) ca -batch -config $(CONFIG) -notext -gencrl -out $@


# ---- Makefile targets ----

.PHONY: all-directories all-files certificate-authority all-symlinks \
	request-ca-certificate sign-certificate-requests chain-signed-certificates \
	install-signed-certificates regenerate-certificate-revocation-lists

all: all-init

all-init: all-directories all-files

all-init-ca: certificate-authority all-symlinks

all-request: request-ca-certificate

all-sign: sign-certificate-requests

all-chain: chain-signed-certificates

all-revoked: certificate-revocation-lists

all-install: install-signed-certificate all-symlinks

all-directories: $(PUBLIC_DIRECTORIES) $(PRIVATE_DIRECTORIES)

all-files: $($(LIBRARY)_FILES)

all-symlinks: $(CERTIFICATE_ALIAS) $(REVOKED_ALIAS) $(PARENT_SYMLINK)

all-lock: $(PKI_LOCK)

certificate-authority: all-directories all-files $(PRIVATE_KEY) $(ROOT_CERTIFICATE)

request-ca-certificate: $(CERTIFICATE_REQUEST)

sign-certificate-requests: $(CERTIFICATE_SIGNING_REQUESTS)

chain-signed-certificates: $(CHAINED_CERTIFICATES)

certificate-revocation-lists: $(REVOKED)

regenerate-certificate-revocation-lists: $(addsuffix .tmp,$(REVOKED))

install-signed-certificate:
	@test -n "$(SIGNED_CERTIFICATE)" && ( \
		test -f $(DB)/$(PKI_CERTIFICATE) || cp -vf $(SIGNED_CERTIFICATE) $(DB)/$(PKI_CERTIFICATE) \
	) || true

$(PUBLIC_DIRECTORIES):
	@mkdir -m $(PKI_PUBLIC_DIR_MODE) -p $@

$(PRIVATE_DIRECTORIES):
	@mkdir -m $(PKI_PRIVATE_DIR_MODE) -p $@

$($(LIBRARY)_FILES):
	$(PUBLIC_DIRECTORY)
	@touch $@

# .db/private/*.key
$(PRIVATE_KEY):
	$(PRIVATE_DIRECTORY)
	@test -r $@ || ( \
		touch $@.tmp && \
		chmod $(PKI_PRIVATE_MODE) $@.tmp && \
		$($(LIBRARY)_COMMAND_PRIVATE_KEY) && \
		mv $@.tmp $@ \
	)

# *.crt
$(ROOT_CERTIFICATE): $(PRIVATE_KEY)
	$(PUBLIC_DIRECTORY)
	@test -r $@ || ( \
		touch $@.tmp && \
		chmod $(PKI_PUBLIC_MODE) $@.tmp && \
		$($(LIBRARY)_COMMAND_SELF_SIGNED_CERTIFICATE) && \
		mv $@.tmp $@ \
	)

# ParentCA/requests/*.csr
$(CERTIFICATE_REQUEST): $(PRIVATE_KEY)
	$(PUBLIC_DIRECTORY)
	@test -r $@ || ( \
		touch $@.tmp && \
		chmod $(PKI_PUBLIC_MODE) $@.tmp && \
		$($(LIBRARY)_COMMAND_REQUEST_CERTIFICATE) && \
		mv $@.tmp $@ \
	)

# requests/*.csr
$(SIGNED_CRT): $(SERIAL) $(PRIVATE_KEY) $(ROOT_CERTIFICATE) $(CERTIFICATE)
	$(PUBLIC_DIRECTORY)
	@test -z "$(ROOT_CERTIFICATE) $(CERTIFICATE)" || ( \
		test -r $@ || ( \
			touch $@.tmp && \
			chmod $(PKI_PUBLIC_MODE) $@.tmp && \
			$($(LIBRARY)_COMMAND_SIGN_CERTIFICATE_REQUEST) || rm -f $@.tmp && \
			mv $@.tmp $@ \
		) \
	)

$(CRT):
	@cat $(patsubst $(CRT),$(SIGNED_CRT),$@) $(CERTIFICATE_CHAIN) > $@

$(CRL): $(REVOKED_SERIAL)
	$(PUBLIC_DIRECTORY)
	@touch $@.tmp && chmod $(PKI_PUBLIC_MODE) $@.tmp && \
	$($(LIBRARY)_COMMAND_CERTIFICATE_REVOCATION_LIST) && \
	mv $@.tmp $@

$(addsuffix .tmp,$(CRL)): $(REVOKED_SERIAL)
	$(PUBLIC_DIRECTORY)
	@touch $@ && chmod $(PKI_PUBLIC_MODE) $@ && \
	$($(LIBRARY)_COMMAND_REGENERATE_REVOCATION_LIST) && \
	mv $@ $(patsubst %.tmp,%,$@)

$(SERIAL):
	@$(OPENSSL) rand -hex 16 | tr '[:lower:]' '[:upper:]' > $@

$(REVOKED_SERIAL):
	@$(OPENSSL) rand -hex 16 | tr '[:lower:]' '[:upper:]' > $@

# default.crl
$(REVOKED_ALIAS):
	@test -e $(REVOKED) && ln -s $(REVOKED) $@ || true

# CA.crt
$(CERTIFICATE_ALIAS):
	@test -e $(DB)/$(PKI_CERTIFICATE) && ln -s $(DB)/$(PKI_CERTIFICATE) $@ || true

# ParentCA
$(PARENT_SYMLINK):
	@test -e $(PARENT_CA) && ln -s ../$(PARENT_CA) $@ || true

# Lock
$(PKI_LOCK):
	@touch $@

