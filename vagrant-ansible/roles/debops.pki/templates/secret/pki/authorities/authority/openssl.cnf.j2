{% set authority = item %}
# This file is managed remotely, all changes will be lost

HOME				= ./.db
RANDFILE			= $HOME/private/.random_seed

default_md			= {{ authority.digest            | default(pki_digest           | default('sha256')) }}
default_bits			= {{ authority.private_key_size  | default(pki_private_key_size | default('2048')) }}

[ ca ]
default_ca			= CA_default

[ CA_default ]
certs				= $HOME/signed
new_certs_dir			= $certs
database			= $HOME/index.txt
certificate			= $HOME/{{         authority.certificate | default(authority.filename | default(authority.cn | default(ansible_fqdn))) + '.crt' }}
private_key			= $HOME/private/{{ authority.private_key | default(authority.filename | default(authority.cn | default(ansible_fqdn))) + '.key' }}
serial				= $HOME/serial
crldir				= revoked
crlnumber			= $HOME/serial_crl
crl				= $crldir/{{     authority.revoked     | default(authority.filename | default(authority.cn | default(ansible_fqdn))) + '.crl' }}

name_opt			= ca_default
cert_opt			= ca_default

default_crl_days		= {{ authority.crl_days       | default(pki_crl_days   | default('30')) }}

email_in_dn			= {{ authority.email_in_dn | default('no') }}
unique_subject			= no
preserve			= no
prompt				= no
copy_extensions			= {{ authority.copy_extensions | default('copy') }}

{% if (authority.grants is defined and authority.grants == 'ca') %}
{% if (authority.parent is undefined or (authority.parent is defined and not authority.parent)) %}
default_days			= {{ ((authority.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_ca_multiplier | int) }}
x509_extensions			= v3_ca

policy				= {{ 'policy_' + (authority.policy | default(pki_rootca_policy | default('rootca'))) }}
{% elif (authority.parent is defined and authority.parent) %}
default_days			= {{ ((authority.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_cert_multiplier | int) }}
x509_extensions			= v3_ca

policy				= {{ 'policy_' + (authority.policy | default(pki_ca_policy | default('intermediate'))) }}
{% endif %}
{% elif (authority.grants is defined and authority.grants == 'server') %}
default_days			= {{ ((authority.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_cert_multiplier | int) }}
x509_extensions			= server_cert

policy				= {{ 'policy_' + (authority.policy | default(pki_cert_policy | default('ca'))) }}
{% elif (authority.grants is defined and authority.grants == 'client') %}
default_days			= {{ ((authority.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_cert_multiplier | int) }}
x509_extensions			= client_cert

policy				= {{ 'policy_' + (authority.policy | default(pki_cert_policy | default('ca'))) }}
{% else %}
default_days			= {{ ((authority.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_cert_multiplier | int) }}
x509_extensions			= default_cert

policy				= {{ 'policy_' + (authority.policy | default(pki_cert_policy | default('ca'))) }}
{% endif %}

[ policy_rootca ]
countryName			= optional
stateOrProvinceName		= optional
localityName			= optional
organizationName		= match
organizationalUnitName		= optional
commonName			= supplied
emailAddress			= optional

[ policy_intermediate ]
countryName			= optional
stateOrProvinceName		= optional
localityName			= optional
organizationName		= supplied
organizationalUnitName		= optional
commonName			= supplied
emailAddress			= optional

[ policy_ca ]
countryName			= supplied
stateOrProvinceName		= supplied
localityName			= supplied
organizationName		= match
organizationalUnitName		= match
commonName			= supplied
emailAddress			= optional

[ policy_custom ]
countryName			= optional
stateOrProvinceName		= optional
localityName			= optional
organizationName		= optional
organizationalUnitName		= optional
commonName			= supplied
emailAddress			= optional

[ req ]
default_md			= {{ authority.digest                       | default(pki_digest           | default('sha256')) }}
default_bits			= {{ authority.private_key_size             | default(pki_private_key_size | default('2048')) }}
default_keyfile			= $HOME/private/{{ authority.private_key | default(authority.filename | default(authority.cn | default(ansible_fqdn))) + '.key' }}
prompt				= no
encrypt_key			= no

distinguished_name		= req_distinguished_name
x509_extensions			= v3_ca

string_mask			= utf8only

[ req_distinguished_name ]
{% if (authority.default_dn is undefined or (authority.default_dn is defined and authority.default_dn)) %}
countryName			= {{ authority.c    | default(pki_country)             }}
stateOrProvinceName		= {{ authority.st   | default(pki_state)               }}
localityName			= {{ authority.l    | default(pki_locality)            }}
organizationName		= {{ authority.o    | default(pki_organization)        }}
organizationalUnitName		= {{ authority.ou   | default(pki_organizational_unit) }}
commonName			= {{ authority.cn   | default(pki_common_name)         }}
{% else %}
{% if authority.c is defined and authority.c %}
countryName			= {{ authority.c }}
{% endif %}
{% if authority.st is defined and authority.st %}
stateOrProvinceName		= {{ authority.st }}
{% endif %}
{% if authority.l is defined and authority.l %}
localityName			= {{ authority.l }}
{% endif %}
{% if authority.o is defined and authority.o %}
organizationName		= {{ authority.o }}
{% endif %}
{% if authority.ou is defined and authority.ou %}
organizationalUnitName		= {{ authority.ou }}
{% endif %}
{% if authority.cn is defined and authority.cn %}
commonName			= {{ authority.cn }}
{% endif %}
{% endif %}

[ req_attributes ]

[ default_cert ]
basicConstraints		= critical, CA:FALSE
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always
keyUsage			= critical, digitalSignature, keyEncipherment
extendedKeyUsage		= serverAuth, clientAuth

[ server_cert ]
basicConstraints		= critical, CA:FALSE
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always
keyUsage			= critical, digitalSignature, keyEncipherment
extendedKeyUsage		= serverAuth

[ client_cert ]
basicConstraints		= critical, CA:FALSE
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always
keyUsage			= critical, digitalSignature, keyEncipherment
extendedKeyUsage		= clientAuth

[ v3_req ]
basicConstraints		= critical, CA:FALSE
keyUsage			= critical, digitalSignature, keyEncipherment
extendedKeyUsage		= serverAuth, clientAuth
subjectAltName			= @subject_alt_names

[ v3_ca ]
basicConstraints		= CA:TRUE
keyUsage			= cRLSign, keyCertSign
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always, issuer:always

[ subject_alt_names ]
{% set pki_tpl_mail = [] %}
{% if (authority.default_dn is undefined or (authority.default_dn is defined and authority.default_dn)) %}
{%   set _ = pki_tpl_mail.append(authority.e | default(pki_email)) %}
{% endif %}
{% if authority.mail is defined and authority.mail %}
{%   set pki_tpl_mail = pki_tpl_mail + authority.mail %}
{% endif %}
{% if pki_tpl_mail is defined and pki_tpl_mail %}
{% for mail_name in pki_tpl_mail %}
email.{{ loop.index0 }}		= {{ mail_name }}
{% endfor %}
{% endif %}
{% set pki_tpl_dns = [] %}
{% if (authority.default_dn is undefined or (authority.default_dn is defined and authority.default_dn)) %}
{%   set _ = pki_tpl_dns.append(authority.cn | default(pki_common_name)) %}
{% endif %}
{% if authority.dns is defined and authority.dns %}
{%   set pki_tpl_dns = pki_tpl_dns + authority.dns %}
{% endif %}
{% if pki_tpl_dns is defined and pki_tpl_dns %}
{% for dns_name in pki_tpl_dns %}
DNS.{{ loop.index0 }}		= {{ dns_name }}
{% endfor %}
{% endif %}
{% if authority.uri is defined and authority.uri %}
{% for uri_name in authority.uri %}
URI.{{ loop.index0 }}		= {{ uri_name }}
{% endfor %}
{% endif %}
{% if authority.ip is defined and authority.ip %}
{% for ip_name in authority.ip %}
IP.{{ loop.index0 }}		= {{ ip_name }}
{% endfor %}
{% endif %}

# vim:ft=dosini
