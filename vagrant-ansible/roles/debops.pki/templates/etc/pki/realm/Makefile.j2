# This file is managed remotely, all changes will be lost

# PKI Makefile - client endpoint
# Copyright (C) 2014 Maciej Delmanowski <drybjed@gmail.com>
# Homepage: http://debops.org/
#
# This is a client endpoint of DebOps PKI infrastructure. It's meant to be run
# remotely via Ansible and is designed to automatically create OpenSSL/GnuTLS
# certificates and manage them in separate PKI realms.


# ---- Main PKI variables, configured via Ansible ----

PKI_BASE_PATH		= {{ pki_base_path           | default('/etc/pki') }}
PKI_REALM		= {{ item.destination        | default('host') }}
{% if item.authority is defined and item.authority %}
{% for authority in pki_authorities %}
{% if authority.name == item.authority %}
PKI_AUTHORITY		= {{ authority.filename      | default(authority.cn) }}
{% endif %}
{% endfor %}
{% endif %}

PKI_REALM_CA_PREFIX	= {{ item.destination        | default('host') + '-' }}

PKI_LIBRARY		= {{ item.library            | default(pki_library            | default('openssl')) }}

PKI_PRIVATE_KEY_SIZE	= {{ item.private_key_size   | default(pki_private_key_size   | default('2048')) }}
PKI_DIGEST		= {{ item.digest             | default(pki_digest             | default('sha256')) }}

PKI_OWNER		= {{ item.owner              | default(pki_owner              | default('root')) }}
PKI_PUBLIC_GROUP	= {{ item.public_group       | default(pki_public_group       | default('root')) }}
PKI_PRIVATE_GROUP	= {{ item.private_group      | default(pki_private_group      | default('ssl-cert')) }}
PKI_PUBLIC_DIR_MODE	= {{ item.public_dir_mode    | default(pki_public_dir_mode    | default('0755')) }}
PKI_PRIVATE_DIR_MODE	= {{ item.private_dir_mode   | default(pki_private_dir_mode   | default('2750')) }}
PKI_PUBLIC_MODE		= {{ item.public_mode        | default(pki_public_mode        | default('0644')) }}
PKI_PRIVATE_MODE	= {{ item.private_mode	     | default(pki_private_mode       | default('0440')) }}

PKI_DHPARAMS		= {{ item.dhparams           | default(pki_dhparams           | default(['512','1024','2048'])) | join(' ') }}
PKI_DEFAULT_DHE		= {{ item.default_dhe        | default(pki_default_dhe        | default('2048')) }}
PKI_DEFAULT_DHPARAM	= {{ item.default_dhparam    | default('$(subst %,$(PKI_DEFAULT_DHE),$(DHE))') }}

PKI_DEFAULT		= {{ item.default            | default(pki_default_certificate | default(ansible_fqdn)) }}
PKI_DEFAULT_CA		= {{ item.default_ca         | default(pki_default_ca         | default('/etc/ssl/certs/ca-certificates.crt')) }}

PKI_DEFAULT_CRT		= {{ item.default_crt        | default('$(subst %,$(PKI_DEFAULT),$(CRT))') }}
PKI_DEFAULT_KEY		= {{ item.default_key        | default('$(subst %,$(PKI_DEFAULT),$(KEY))') }}
PKI_DEFAULT_PEM		= {{ item.default_pem        | default('$(subst %,$(PKI_DEFAULT),$(PEM))') }}
{% if item.authority is defined and item.authority %}
PKI_DEFAULT_CRL		= {{ item.default_crl        | default('$(subst %,$(PKI_AUTHORITY),$(CRL))') }}
{% endif %}

DIR_PREFIX		= directory-
SYSTEM_CA_PREFIX	= $(PKI_REALM_CA_PREFIX)

PKI_SIGNATURES		= pki-signatures.txt
PKI_PERMISSIONS		= pki-permissions.txt

openssl_LIBRARY		= OPENSSL
gnutls_LIBRARY		= GNUTLS
LIBRARY			= $($(PKI_LIBRARY)_LIBRARY)

OPENSSL			= openssl
GNUTLS			= certtool

OPENSSL_COMMAND		= $(OPENSSL)
GNUTLS_COMMAND		= $(GNUTLS)
COMMAND			= $($(LIBRARY)_COMMAND)

DIGEST			= sha256sum

CA			= CA/%.crt
SYSTEM_CA		= /usr/local/share/ca-certificates/$(SYSTEM_CA_PREFIX)%.crt

DHE			= dhparams/dh%.pem
CNF			= templates/%.cnf
KEY			= private/%.key
CSR			= requests/%.csr
CRT			= certs/%.crt
PEM			= combined/%.pem
CRL			= revoked/%.crl

DEFAULT_DHPARAM		= dhparam.pem

DEFAULT_CA_NAME		= CA
DEFAULT_NAME		= default

DEFAULT_CA		= $(DEFAULT_CA_NAME).crt
DEFAULT_CRT		= $(DEFAULT_NAME).crt
DEFAULT_KEY		= $(DEFAULT_NAME).key
DEFAULT_PEM		= $(DEFAULT_NAME).pem
DEFAULT_CRL		= $(DEFAULT_NAME).crl

DEFAULT_SYMLINKS	= DEFAULT_DHPARAM DEFAULT_CA DEFAULT_CRT DEFAULT_KEY DEFAULT_PEM DEFAULT_CRL

PUBLIC_DIRECTORIES	= $(addprefix $(DIR_PREFIX),$(sort $(dir $(DHE)) $(dir $(CA)) $(dir $(CNF)) $(dir $(CRL)) $(dir $(CSR)) $(dir $(CRT))))
PRIVATE_DIRECTORIES	= $(addprefix $(DIR_PREFIX),$(sort $(dir $(KEY)) $(dir $(PEM))))

DIFFIE_HELLMAN_PARAMETERS		= $(patsubst %,$(DHE),$(PKI_DHPARAMS))

PRIVATE_KEYS				= $(patsubst $(CNF),$(KEY),		$(wildcard $(subst %,*,$(CNF))))
CERTIFICATE_SIGNING_REQUESTS		= $(patsubst $(CNF),$(CSR),		$(wildcard $(subst %,*,$(CNF))))
CERTIFICATES				= $(wildcard $(subst %,*,$(CRT)))

COMBINED_CERTIFICATES			= $(sort $(patsubst $(KEY),$(PEM),$(wildcard $(subst %,*,$(KEY)))))

BUNDLED_CERTIFICATE_AUTHORITIES		= $(patsubst $(CA),$(SYSTEM_CA),$(wildcard $(subst %,*,$(CA))))


.PHONY: $(PUBLIC_DIRECTORIES) $(PRIVATE_DIRECTORIES) \
	$(BUNDLED_CERTIFICATE_AUTHORITIES) \
	$(DEFAULT_SYMLINKS) $(PKI_SIGNATURES) $(PKI_PERMISSIONS) \
	$(addsuffix .tmp,$(DIFFIE_HELLMAN_PARAMETERS)) clean-certificates list

all: all-directories all-dhparams all-private-keys all-requests all-combined-certificates all-default-symlinks clean-certificate-symlinks all-bundled-certificates signatures-permissions

all-directories: $(PUBLIC_DIRECTORIES) $(PRIVATE_DIRECTORIES)

all-dhparams: $(DIFFIE_HELLMAN_PARAMETERS)

all-private-keys: $(PRIVATE_KEYS)

all-requests: $(CERTIFICATE_SIGNING_REQUESTS)

all-default-symlinks: $(DEFAULT_SYMLINKS)

all-combined-certificates: $(COMBINED_CERTIFICATES)

all-bundled-certificates: $(BUNDLED_CERTIFICATE_AUTHORITIES)

signatures-permissions: $(PKI_SIGNATURES) $(PKI_PERMISSIONS)

# /usr/local/share/ca-certificates/*.crt
$(BUNDLED_CERTIFICATE_AUTHORITIES):
	@test -n "$(patsubst $(SYSTEM_CA),$(CA),$@)" && test -e "$(patsubst $(SYSTEM_CA),$(CA),$@)" && ( \
		test -L $@ && test "$(shell readlink -f $@)" = "$(shell readlink -f "$(patsubst $(SYSTEM_CA),$(CA),$@)")" || ( \
			rm -f $@ && ln -sf $(shell readlink -f $(patsubst $(SYSTEM_CA),$(CA),$@)) $@ && \
			echo "$@ -> $(patsubst $(SYSTEM_CA),$(CA),$@)" \
		) \
	) || ( \
		test -L $@ && rm -f $@ || true \
	)

# default.* CA.crt dhparam.pem
$(DEFAULT_SYMLINKS):
	@test -n "$(PKI_$@)" && test -e "$(PKI_$@)" && ( \
		test -L $($@) && test "$(shell readlink -f $($@))" = "$(shell readlink -f "$(PKI_$@)")" || ( \
			rm -f $($@) && ln -sf $(PKI_$@) $($@) && \
			echo "$($@) -> $(PKI_$@)" \
		) \
	) || ( \
		test -L $($@) && rm -f $($@) || true \
	)

# CA/ templates/ requests/ selfsigned/ signed/ certs/ revoked/ dhparams/
$(PUBLIC_DIRECTORIES):
	@test -d $(subst $(DIR_PREFIX),,$@) -a "$(shell stat -L -c "%a %U %G" $(subst $(DIR_PREFIX),,$@) 2> /dev/null)" = "755 $(PKI_OWNER) $(PKI_PUBLIC_GROUP)" || ( \
		mkdir -m $(PKI_PUBLIC_DIR_MODE) -p $(subst $(DIR_PREFIX),,$@) && \
		chmod $(PKI_PUBLIC_DIR_MODE) $(subst $(DIR_PREFIX),,$@) && \
		chown $(PKI_OWNER).$(PKI_PUBLIC_GROUP) $(subst $(DIR_PREFIX),,$@) \
	)

# private/ combined/
$(PRIVATE_DIRECTORIES):
	@test -d $(subst $(DIR_PREFIX),,$@) -a "$(shell stat -L -c "%a %U %G" $(subst $(DIR_PREFIX),,$@) 2> /dev/null)" = "2750 $(PKI_OWNER) $(PKI_PRIVATE_GROUP)" || ( \
		mkdir -m $(PKI_PRIVATE_DIR_MODE) -p $(subst $(DIR_PREFIX),,$@) && \
		chmod $(PKI_PRIVATE_DIR_MODE) $(subst $(DIR_PREFIX),,$@) && \
		chown $(PKI_OWNER).$(PKI_PRIVATE_GROUP) $(subst $(DIR_PREFIX),,$@) \
	)

OPENSSL_KEY_COMMAND		= $(OPENSSL) genrsa -out $@.tmp $(PKI_PRIVATE_KEY_SIZE)
GNUTLS_KEY_COMMAND		= $(GNUTLS) --generate-privkey --hash $(PKI_DIGEST) --bits $(PKI_PRIVATE_KEY_SIZE) --outfile $@.tmp

# private/*.key
$(KEY): $(addprefix $(DIR_PREFIX),$(dir $(KEY)))
	@test -r $@ || ( \
		touch $@.tmp && \
		chmod $(PKI_PRIVATE_MODE) $@.tmp && \
		chown $(PKI_OWNER).$(PKI_PRIVATE_GROUP) $@.tmp && \
		$($(LIBRARY)_KEY_COMMAND) && \
		mv $@.tmp $@ \
	)

OPENSSL_CSR_COMMAND	= $(OPENSSL) req -new -utf8 -config $(patsubst $(CSR),$(CNF),$@) -key $(patsubst $(CSR),$(KEY),$@) -out $@.tmp
GNUTLS_CSR_COMMAND	= $(GNUTLS) --generate-request --template $(patsubst $(CSR),$(CNF),$@) --load-privkey $(patsubst $(CSR),$(KEY),$@) --outfile $@.tmp

# requests/*.csr
$(CSR): $(addprefix $(DIR_PREFIX),$(dir $(CSR))) $(KEY)
	@test -r $@ || ( \
		touch $@.tmp && \
		chmod $(PKI_PUBLIC_MODE) $@.tmp && \
		chown $(PKI_OWNER).$(PKI_PUBLIC_GROUP) $@.tmp && \
		$($(LIBRARY)_CSR_COMMAND) && \
		mv $@.tmp $@ \
	)

# combined/*.pem
$(PEM): $(addprefix $(DIR_PREFIX),$(dir $(PEM))) $(KEY)
	@test -e $@ && ( \
		test -r $(PKI_SIGNATURES) && egrep "($(patsubst %.key,%,$(patsubst $(PEM),$(KEY),$@))|$(patsubst %.crt,%,$(patsubst $(PEM),$(CERTIFICATES),$@)))" $(PKI_SIGNATURES) | $(DIGEST) --check --status || ( \
			touch $@.tmp && \
			chmod $(PKI_PRIVATE_MODE) $@.tmp && \
			chown $(PKI_OWNER).$(PKI_PRIVATE_GROUP) $@.tmp && \
			cat $(patsubst $(PEM),$(KEY),$@) $(patsubst $(PEM),$(CERTIFICATES),$@) > $@.tmp && \
			mv $@.tmp $@ && \
			echo "$(patsubst $(PEM),$(KEY),$@) + $(patsubst $(PEM),$(CERTIFICATES),$@) -> $@" \
		) \
	) || ( \
		touch $@.tmp && \
		chmod $(PKI_PRIVATE_MODE) $@.tmp && \
		chown $(PKI_OWNER).$(PKI_PRIVATE_GROUP) $@.tmp && \
		cat $(patsubst $(PEM),$(KEY),$@) $(patsubst $(PEM),$(CERTIFICATES),$@) > $@.tmp && \
		mv $@.tmp $@ && \
		echo "$(patsubst $(PEM),$(KEY),$@) + $(patsubst $(PEM),$(CERTIFICATES),$@) -> $@" \
	)

# pki-signatures.txt
$(PKI_SIGNATURES):
	@touch $@.tmp && for file in $$(find */ \( -type f -or -type l \) ! -path 'dhparams/*'); do $(DIGEST) $$file >> $@.tmp ; done && test -r $@ && $(DIGEST) $@.tmp | sed -e 's/$@\.tmp/$@/' | $(DIGEST) --check --status && ( \
		rm -f $@.tmp \
	) || ( \
		mv $@.tmp $@ && \
		echo "Updated $@" && \
		make --no-print-directory $(PKI_PERMISSIONS) \
	)

# pki-permissions.txt
$(PKI_PERMISSIONS):
	@touch $@.tmp && for file in $$(find . -not -name $@.tmp); do getfacl $$file >> $@.tmp ; done && test -r $@ && diff $@.tmp $@ > /dev/null && ( \
		rm -f $@.tmp \
	) || ( \
		mv $@.tmp $@ && \
		echo "Updated $@" \
	)

OPENSSL_DHPARAMS_COMMAND	= $(OPENSSL) dhparam -out $@.tmp $(patsubst $(DHE),%,$@)
GNUTLS_DHPARAMS_COMMAND		= $(GNUTLS) --generate-dh-params --bits $(patsubst $(DHE),%,$@) --outfile $@.tmp

OPENSSL_DHPARAMS_REGEN_COMMAND	= $(OPENSSL) dhparam -out $@ $(patsubst $(addsuffix .tmp,$(DHE)),%,$@)
GNUTLS_DHPARAMS_REGEN_COMMAND	= $(GNUTLS) --generate-dh-params --bits $(patsubst $(addsuffix .tmp,$(DHE)),%,$@) --outfile $@

# dhparams/dh*.pem
$(DIFFIE_HELLMAN_PARAMETERS): $(addprefix $(DIR_PREFIX),$(dir $(DHE)))
	@test -e $@ || ( \
		touch $@.tmp && \
		chmod $(PKI_PUBLIC_MODE) $@.tmp && \
		chown $(PKI_OWNER).$(PKI_PUBLIC_GROUP) $@.tmp && \
		$($(LIBRARY)_DHPARAMS_COMMAND) && \
		mv $@.tmp $@ \
	)

# dhparams/dh*.pem (regeneration)
$(addsuffix .tmp,$(DIFFIE_HELLMAN_PARAMETERS)): $(addprefix $(DIR_PREFIX),$(dir $(DHE)))
	touch $@ && \
	chmod $(PKI_PUBLIC_MODE) $@ && \
	chown $(PKI_OWNER).$(PKI_PUBLIC_GROUP) $@ && \
	$($(LIBRARY)_DHPARAMS_REGEN_COMMAND) && \
	mv $@ $(patsubst %.tmp,%,$@)

regenerate-dhparams: $(addsuffix .tmp,$(DIFFIE_HELLMAN_PARAMETERS))

check:
	@$(DIGEST) --check $(PKI_SIGNATURES) --strict --status || $(DIGEST) --check $(PKI_SIGNATURES) --strict
	@find . -exec getfacl {} \; | diff -u $(PKI_PERMISSIONS) -

clean-certificate-symlinks:
	@find $(dir $(SYSTEM_CA)) -maxdepth 1 -type l -exec sh -c 'for x; do [ -e "$$x" ] || (rm "$$x" && echo "Removed broken symlink $$x"); done' _ {} +

clean-private:
	@rm -vrf $(PRIVATE_KEYS)

clean-requests:
	@rm -vrf $(CERTIFICATE_SIGNING_REQUESTS)

clean-selfcrt:
	@rm -vrf $(SELF_SIGNED_CERTIFICATES)

clean-crt:
	@rm -vrf $(SIGNED_CERTIFICATES)

clean-local-certificates:
	@rm -rf $(LOCAL_CERTIFICATES)

clean-combined:
	@rm -vrf $(COMBINED_CERTIFICATES)

renew-certificates: clean-requests clean-selfcrt clean-crt
	@make all

heartbleed: clean-private clean-requests clean-selfcrt clean-crt
	@make all

clean-symlinks:
	@rm -vrf $(BUNDLED_CERTIFICATE_AUTHORITIES) $(DEFAULT_CA) $(DEFAULT_DHPARAM) $(DEFAULT_CRT) $(DEFAULT_KEY) $(DEFAULT_PEM) $(DEFAULT_CRL)

clean-signatures-permissions:
	@rm -vrf pki-signatures.txt pki-permissions.txt

clean-all:
	@rm -vrf $(filter-out Makefile $(subst /,,$(dir $(CNF))), $(sort $(wildcard *)))

clean: clean-private clean-requests clean-selfcrt clean-crt clean-combined clean-local-certificates clean-symlinks clean-signatures-permissions

list-key: print-PRIVATE_KEYS

list-csr: print-CERTIFICATE_SIGNING_REQUESTS

list-selfcrt: print-SELF_SIGNED_CERTIFICATES

list-crt: print-SIGNED_CERTIFICATES

list-local: print-PRIVATE_KEYS print-LOCAL_CERTIFICATES

list-external: print-EXTERNAL_PRIVATE_KEYS print-EXTERNAL_CERTIFICATES

list-symlinked: print-SYMLINKED_CERTIFICATES

list-combined: print-COMBINED_CERTIFICATES

list-bundled: print-BUNDLED_CERTIFICATE_AUTHORITIES

define print-section-title
	@tput setaf 6 ; tput bold ; echo $1 | tr '[:upper:]' '[:lower:]' | sed -e 's/_/ /g' -e 's/.*/\u&/' ; tput sgr0
endef

print-%:
	$(call print-section-title,"$(subst print-,,$@):")
	@for item in $($(subst print-,,$@)) ; do \
		[ "$(subst print-,,$@)" = "BUNDLED_CERTIFICATE_AUTHORITIES" ] && file=$$item || file=$$(echo $$item | cut -d/ -f2-) ; \
		real=$$(readlink $$item) ; \
		test -L $$item && ( \
			test -e $$item && echo "  $$file -> $$real" || echo "  $$file" \
		) || ( \
			test -e $$item && echo "  $$file" || echo "* $$file" \
		) ; \
	done ; echo

list: list-local list-external list-symlinked list-combined list-bundled

